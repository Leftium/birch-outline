module.exports = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { DateTimeExpression: peg$parseDateTimeExpression, Time: peg$parseTime, Duration: peg$parseDuration },
        peg$startRuleFunction  = peg$parseDateTimeExpression,

        peg$c0 = function(dateTime, time, durations) {
              if (!dateTime) {
                dateTime = currentMoment()
              }

              var result = options.moment(dateTime)

              if (time) {
                result = result.startOf('day');
                result.add(time);
              }

              durations.forEach(function(each) {
                result.add(each[0]);
              });

              return result;
            },
        peg$c1 = ":",
        peg$c2 = { type: "literal", value: ":", description: "\":\"" },
        peg$c3 = "-",
        peg$c4 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c5 = function(year, month, day) {
              if (month) {
                month = month[1]
              } else {
                month = 0
              }

              if (day) {
                day = day[1]
              } else {
                day = 1
              }
              return options.moment([year[0], month, day]);
            },
        peg$c6 = /^[0-9]/,
        peg$c7 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c8 = function(year) {
              return parseInt(year.join(''), 10);
            },
        peg$c9 = function(month) {
              return parseInt(month.join(''), 10) - 1;
            },
        peg$c10 = function(day) {
              return parseInt(day.join(''), 10);
            },
        peg$c11 = "now",
        peg$c12 = { type: "literal", value: "now", description: "\"now\"" },
        peg$c13 = function() { return currentMoment(); },
        peg$c14 = "yesterday",
        peg$c15 = { type: "literal", value: "yesterday", description: "\"yesterday\"" },
        peg$c16 = function() { return currentMoment().startOf('day').subtract(1, 'day'); },
        peg$c17 = "today",
        peg$c18 = { type: "literal", value: "today", description: "\"today\"" },
        peg$c19 = function() { return currentMoment().startOf('day'); },
        peg$c20 = "tomorrow",
        peg$c21 = { type: "literal", value: "tomorrow", description: "\"tomorrow\"" },
        peg$c22 = function() { return currentMoment().startOf('day').add(1, 'day'); },
        peg$c23 = function(specifier, month, day) {
              if (day == undefined) {
                day = 1;
              }

              if (!specifier || specifier == 'this') {
                return currentMoment().startOf('day').month(month).date(day)
              } else if (specifier == 'next') {
                return currentMoment().startOf('day').month(month).date(day).add(1, 'year')
              } else if (specifier == 'last') {
                return currentMoment().startOf('day').month(month).date(day).subtract(1, 'year')
              }
            },
        peg$c24 = "this",
        peg$c25 = { type: "literal", value: "this", description: "\"this\"" },
        peg$c26 = "next",
        peg$c27 = { type: "literal", value: "next", description: "\"next\"" },
        peg$c28 = "last",
        peg$c29 = { type: "literal", value: "last", description: "\"last\"" },
        peg$c30 = function(specifier) {
              return specifier.toLowerCase();
            },
        peg$c31 = "january",
        peg$c32 = { type: "literal", value: "january", description: "\"january\"" },
        peg$c33 = "jan",
        peg$c34 = { type: "literal", value: "jan", description: "\"jan\"" },
        peg$c35 = "february",
        peg$c36 = { type: "literal", value: "february", description: "\"february\"" },
        peg$c37 = "feb",
        peg$c38 = { type: "literal", value: "feb", description: "\"feb\"" },
        peg$c39 = "march",
        peg$c40 = { type: "literal", value: "march", description: "\"march\"" },
        peg$c41 = "mar",
        peg$c42 = { type: "literal", value: "mar", description: "\"mar\"" },
        peg$c43 = "april",
        peg$c44 = { type: "literal", value: "april", description: "\"april\"" },
        peg$c45 = "apr",
        peg$c46 = { type: "literal", value: "apr", description: "\"apr\"" },
        peg$c47 = "may",
        peg$c48 = { type: "literal", value: "may", description: "\"may\"" },
        peg$c49 = "june",
        peg$c50 = { type: "literal", value: "june", description: "\"june\"" },
        peg$c51 = "jun",
        peg$c52 = { type: "literal", value: "jun", description: "\"jun\"" },
        peg$c53 = "july",
        peg$c54 = { type: "literal", value: "july", description: "\"july\"" },
        peg$c55 = "jul",
        peg$c56 = { type: "literal", value: "jul", description: "\"jul\"" },
        peg$c57 = "august",
        peg$c58 = { type: "literal", value: "august", description: "\"august\"" },
        peg$c59 = "aug",
        peg$c60 = { type: "literal", value: "aug", description: "\"aug\"" },
        peg$c61 = "september",
        peg$c62 = { type: "literal", value: "september", description: "\"september\"" },
        peg$c63 = "sep",
        peg$c64 = { type: "literal", value: "sep", description: "\"sep\"" },
        peg$c65 = "october",
        peg$c66 = { type: "literal", value: "october", description: "\"october\"" },
        peg$c67 = "oct",
        peg$c68 = { type: "literal", value: "oct", description: "\"oct\"" },
        peg$c69 = "november",
        peg$c70 = { type: "literal", value: "november", description: "\"november\"" },
        peg$c71 = "nov",
        peg$c72 = { type: "literal", value: "nov", description: "\"nov\"" },
        peg$c73 = "december",
        peg$c74 = { type: "literal", value: "december", description: "\"december\"" },
        peg$c75 = "dec",
        peg$c76 = { type: "literal", value: "dec", description: "\"dec\"" },
        peg$c77 = function(specifier, day) {
              if (!specifier || specifier == 'this') {
                return currentMoment().startOf('day').day(day);
              } else if (specifier == 'next') {
                return currentMoment().startOf('day').day(day).add(1, 'week');
              } else if (specifier == 'last') {
                return currentMoment().startOf('day').day(day).subtract(1, 'week');
              }
            },
        peg$c78 = function(specifier, durationUnit) {
              if (specifier == 'this') {
                return currentMoment().startOf(durationUnit);
              } else if (specifier == 'next') {
                return currentMoment().startOf(durationUnit).add(1, durationUnit);
              } else if (specifier == 'last') {
                return currentMoment().startOf(durationUnit).subtract(1, durationUnit);
              }
            },
        peg$c79 = "monday",
        peg$c80 = { type: "literal", value: "monday", description: "\"monday\"" },
        peg$c81 = "mont",
        peg$c82 = { type: "literal", value: "mont", description: "\"mont\"" },
        peg$c83 = "mon",
        peg$c84 = { type: "literal", value: "mon", description: "\"mon\"" },
        peg$c85 = function() { return 'mon'; },
        peg$c86 = "tuesday",
        peg$c87 = { type: "literal", value: "tuesday", description: "\"tuesday\"" },
        peg$c88 = "tue",
        peg$c89 = { type: "literal", value: "tue", description: "\"tue\"" },
        peg$c90 = "wednesday",
        peg$c91 = { type: "literal", value: "wednesday", description: "\"wednesday\"" },
        peg$c92 = "wed",
        peg$c93 = { type: "literal", value: "wed", description: "\"wed\"" },
        peg$c94 = "thursday",
        peg$c95 = { type: "literal", value: "thursday", description: "\"thursday\"" },
        peg$c96 = "thu",
        peg$c97 = { type: "literal", value: "thu", description: "\"thu\"" },
        peg$c98 = "friday",
        peg$c99 = { type: "literal", value: "friday", description: "\"friday\"" },
        peg$c100 = "fri",
        peg$c101 = { type: "literal", value: "fri", description: "\"fri\"" },
        peg$c102 = "saturday",
        peg$c103 = { type: "literal", value: "saturday", description: "\"saturday\"" },
        peg$c104 = "sat",
        peg$c105 = { type: "literal", value: "sat", description: "\"sat\"" },
        peg$c106 = "sunday",
        peg$c107 = { type: "literal", value: "sunday", description: "\"sunday\"" },
        peg$c108 = "sun",
        peg$c109 = { type: "literal", value: "sun", description: "\"sun\"" },
        peg$c110 = "at",
        peg$c111 = { type: "literal", value: "at", description: "\"at\"" },
        peg$c112 = function(hours, period) {
              if (period == 'pm') {
                hours += 12;
              }
              return options.moment.duration({ hours: hours });
            },
        peg$c113 = function(hours, minutes, seconds, milliseconds, period) {
              if (period == 'pm') {
                hours += 12;
              }

              if (seconds) {
                seconds = seconds[1];
              } else {
                seconds = 0;
              }

              if (milliseconds) {
                milliseconds = milliseconds[1]
              } else {
                milliseconds = 0
              }

              return options.moment.duration({
                hours: hours,
                minutes: minutes[1],
                seconds: seconds,
                milliseconds: milliseconds
              });
            },
        peg$c114 = "pm",
        peg$c115 = { type: "literal", value: "pm", description: "\"pm\"" },
        peg$c116 = "am",
        peg$c117 = { type: "literal", value: "am", description: "\"am\"" },
        peg$c118 = function(period) {
              return period.toLowerCase();
            },
        peg$c119 = "+",
        peg$c120 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c121 = function(adjust, quantity, durationUnit) {
              if (adjust == '-') {
                quantity *= -1
              }
              return options.moment.duration(quantity, durationUnit);
            },
        peg$c122 = "milliseconds",
        peg$c123 = { type: "literal", value: "milliseconds", description: "\"milliseconds\"" },
        peg$c124 = "millisecond",
        peg$c125 = { type: "literal", value: "millisecond", description: "\"millisecond\"" },
        peg$c126 = "ms",
        peg$c127 = { type: "literal", value: "ms", description: "\"ms\"" },
        peg$c128 = function() { return 'milliseconds' },
        peg$c129 = "seconds",
        peg$c130 = { type: "literal", value: "seconds", description: "\"seconds\"" },
        peg$c131 = "second",
        peg$c132 = { type: "literal", value: "second", description: "\"second\"" },
        peg$c133 = "sec",
        peg$c134 = { type: "literal", value: "sec", description: "\"sec\"" },
        peg$c135 = "sa",
        peg$c136 = { type: "literal", value: "sa", description: "\"sa\"" },
        peg$c137 = "su",
        peg$c138 = { type: "literal", value: "su", description: "\"su\"" },
        peg$c139 = "s",
        peg$c140 = { type: "literal", value: "s", description: "\"s\"" },
        peg$c141 = function() { return 'seconds' },
        peg$c142 = "minutes",
        peg$c143 = { type: "literal", value: "minutes", description: "\"minutes\"" },
        peg$c144 = "minute",
        peg$c145 = { type: "literal", value: "minute", description: "\"minute\"" },
        peg$c146 = "mins",
        peg$c147 = { type: "literal", value: "mins", description: "\"mins\"" },
        peg$c148 = "min",
        peg$c149 = { type: "literal", value: "min", description: "\"min\"" },
        peg$c150 = "mo",
        peg$c151 = { type: "literal", value: "mo", description: "\"mo\"" },
        peg$c152 = "ma",
        peg$c153 = { type: "literal", value: "ma", description: "\"ma\"" },
        peg$c154 = "m",
        peg$c155 = { type: "literal", value: "m", description: "\"m\"" },
        peg$c156 = function() { return 'minutes' },
        peg$c157 = "hours",
        peg$c158 = { type: "literal", value: "hours", description: "\"hours\"" },
        peg$c159 = "hour",
        peg$c160 = { type: "literal", value: "hour", description: "\"hour\"" },
        peg$c161 = "h",
        peg$c162 = { type: "literal", value: "h", description: "\"h\"" },
        peg$c163 = function() { return 'hours' },
        peg$c164 = "days",
        peg$c165 = { type: "literal", value: "days", description: "\"days\"" },
        peg$c166 = "day",
        peg$c167 = { type: "literal", value: "day", description: "\"day\"" },
        peg$c168 = "de",
        peg$c169 = { type: "literal", value: "de", description: "\"de\"" },
        peg$c170 = "d",
        peg$c171 = { type: "literal", value: "d", description: "\"d\"" },
        peg$c172 = function() { return 'days' },
        peg$c173 = "weeks",
        peg$c174 = { type: "literal", value: "weeks", description: "\"weeks\"" },
        peg$c175 = "week",
        peg$c176 = { type: "literal", value: "week", description: "\"week\"" },
        peg$c177 = "we",
        peg$c178 = { type: "literal", value: "we", description: "\"we\"" },
        peg$c179 = "w",
        peg$c180 = { type: "literal", value: "w", description: "\"w\"" },
        peg$c181 = function() { return 'weeks' },
        peg$c182 = "isoweeks",
        peg$c183 = { type: "literal", value: "isoweeks", description: "\"isoweeks\"" },
        peg$c184 = "isoweek",
        peg$c185 = { type: "literal", value: "isoweek", description: "\"isoweek\"" },
        peg$c186 = "isowe",
        peg$c187 = { type: "literal", value: "isowe", description: "\"isowe\"" },
        peg$c188 = "isow",
        peg$c189 = { type: "literal", value: "isow", description: "\"isow\"" },
        peg$c190 = function() { return 'isoweeks' },
        peg$c191 = "months",
        peg$c192 = { type: "literal", value: "months", description: "\"months\"" },
        peg$c193 = "month",
        peg$c194 = { type: "literal", value: "month", description: "\"month\"" },
        peg$c195 = "oc",
        peg$c196 = { type: "literal", value: "oc", description: "\"oc\"" },
        peg$c197 = "o",
        peg$c198 = { type: "literal", value: "o", description: "\"o\"" },
        peg$c199 = function() { return 'months' },
        peg$c200 = "quarters",
        peg$c201 = { type: "literal", value: "quarters", description: "\"quarters\"" },
        peg$c202 = "quarter",
        peg$c203 = { type: "literal", value: "quarter", description: "\"quarter\"" },
        peg$c204 = "q",
        peg$c205 = { type: "literal", value: "q", description: "\"q\"" },
        peg$c206 = function() { return 'quarters' },
        peg$c207 = "years",
        peg$c208 = { type: "literal", value: "years", description: "\"years\"" },
        peg$c209 = "year",
        peg$c210 = { type: "literal", value: "year", description: "\"year\"" },
        peg$c211 = "y",
        peg$c212 = { type: "literal", value: "y", description: "\"y\"" },
        peg$c213 = function() { return 'years' },
        peg$c214 = { type: "other", description: "integer" },
        peg$c215 = function() { return parseInt(text(), 10); },
        peg$c216 = { type: "other", description: "whitespace" },
        peg$c217 = function(whitespace) { return whitespace.join("") },
        peg$c218 = /^[ \t\n\r]/,
        peg$c219 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseDateTimeExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 20 + 0,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseDate();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTime();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              s7 = peg$parseDuration();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = peg$parseDuration();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c0(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDate() {
      var s0;

      var key    = peg$currPos * 20 + 1,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parseAbsoluteDate();
      if (s0 === peg$FAILED) {
        s0 = peg$parseRelativeDate();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseAbsoluteDate() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 20 + 2,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseYear();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseDurationUnit();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              peg$silentFails++;
              s7 = peg$parsePeriod();
              peg$silentFails--;
              if (s7 === peg$FAILED) {
                s6 = void 0;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  peg$silentFails++;
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s9 = peg$c1;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c2); }
                  }
                  peg$silentFails--;
                  if (s9 === peg$FAILED) {
                    s8 = void 0;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 !== peg$FAILED) {
                    s2 = [s2, s3, s4, s5, s6, s7, s8];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s3 = peg$c3;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseMonthNumber();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            s4 = peg$c3;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c4); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDayNumberOfMonth();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c5(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseYear() {
      var s0, s1, s2;

      var key    = peg$currPos * 20 + 3,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      if (peg$c6.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c6.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c8(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseMonthNumber() {
      var s0, s1, s2;

      var key    = peg$currPos * 20 + 4,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      if (peg$c6.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c6.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c9(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDayNumberOfMonth() {
      var s0, s1, s2;

      var key    = peg$currPos * 20 + 5,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      if (peg$c6.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c6.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c10(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseRelativeDate() {
      var s0, s1;

      var key    = peg$currPos * 20 + 6,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c11) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c14) {
          s1 = input.substr(peg$currPos, 9);
          peg$currPos += 9;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c15); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c16();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c17) {
            s1 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c18); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c19();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c20) {
              s1 = input.substr(peg$currPos, 8);
              peg$currPos += 8;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c22();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$parseRelativeMonth();
              if (s0 === peg$FAILED) {
                s0 = peg$parseRelativeDayOfWeek();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseRelativeDuration();
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseRelativeMonth() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 20 + 7,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseRelativeSpecifier();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseMonthName();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseDayNumberOfMonth();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c23(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseRelativeSpecifier() {
      var s0, s1;

      var key    = peg$currPos * 20 + 8,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c24) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c26) {
          s1 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c27); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c28) {
            s1 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c30(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseMonthName() {
      var s0;

      var key    = peg$currPos * 20 + 9,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c33) {
          s0 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c35) {
            s0 = input.substr(peg$currPos, 8);
            peg$currPos += 8;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c37) {
              s0 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c38); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c39) {
                s0 = input.substr(peg$currPos, 5);
                peg$currPos += 5;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c40); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c41) {
                  s0 = input.substr(peg$currPos, 3);
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c42); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5).toLowerCase() === peg$c43) {
                    s0 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c44); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c45) {
                      s0 = input.substr(peg$currPos, 3);
                      peg$currPos += 3;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c46); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c47) {
                        s0 = input.substr(peg$currPos, 3);
                        peg$currPos += 3;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c48); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c49) {
                          s0 = input.substr(peg$currPos, 4);
                          peg$currPos += 4;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c50); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c51) {
                            s0 = input.substr(peg$currPos, 3);
                            peg$currPos += 3;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c52); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c53) {
                              s0 = input.substr(peg$currPos, 4);
                              peg$currPos += 4;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c54); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c55) {
                                s0 = input.substr(peg$currPos, 3);
                                peg$currPos += 3;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c56); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c57) {
                                  s0 = input.substr(peg$currPos, 6);
                                  peg$currPos += 6;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c58); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c59) {
                                    s0 = input.substr(peg$currPos, 3);
                                    peg$currPos += 3;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c60); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c61) {
                                      s0 = input.substr(peg$currPos, 9);
                                      peg$currPos += 9;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c62); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c63) {
                                        s0 = input.substr(peg$currPos, 3);
                                        peg$currPos += 3;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c64); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c65) {
                                          s0 = input.substr(peg$currPos, 7);
                                          peg$currPos += 7;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c66); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c67) {
                                            s0 = input.substr(peg$currPos, 3);
                                            peg$currPos += 3;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c68); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c69) {
                                              s0 = input.substr(peg$currPos, 8);
                                              peg$currPos += 8;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c70); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c71) {
                                                s0 = input.substr(peg$currPos, 3);
                                                peg$currPos += 3;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c72); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 8).toLowerCase() === peg$c73) {
                                                  s0 = input.substr(peg$currPos, 8);
                                                  peg$currPos += 8;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c74); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c75) {
                                                    s0 = input.substr(peg$currPos, 3);
                                                    peg$currPos += 3;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c76); }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseRelativeDayOfWeek() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 20 + 10,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseRelativeSpecifier();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDayOfWeek();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c77(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseRelativeDuration() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 20 + 11,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseRelativeSpecifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDurationUnit();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c78(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDayOfWeek() {
      var s0, s1, s2;

      var key    = peg$currPos * 20 + 12,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c79) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c81) {
          s2 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c82); }
        }
        peg$silentFails--;
        if (s2 === peg$FAILED) {
          s1 = void 0;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c83) {
            s2 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c84); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c85();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c86) {
            s0 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c87); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c88) {
              s0 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c89); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c90) {
                s0 = input.substr(peg$currPos, 9);
                peg$currPos += 9;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c91); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c92) {
                  s0 = input.substr(peg$currPos, 3);
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c93); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 8).toLowerCase() === peg$c94) {
                    s0 = input.substr(peg$currPos, 8);
                    peg$currPos += 8;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c95); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c96) {
                      s0 = input.substr(peg$currPos, 3);
                      peg$currPos += 3;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c97); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c98) {
                        s0 = input.substr(peg$currPos, 6);
                        peg$currPos += 6;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c99); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c100) {
                          s0 = input.substr(peg$currPos, 3);
                          peg$currPos += 3;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c101); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c102) {
                            s0 = input.substr(peg$currPos, 8);
                            peg$currPos += 8;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c103); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c104) {
                              s0 = input.substr(peg$currPos, 3);
                              peg$currPos += 3;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c105); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c106) {
                                s0 = input.substr(peg$currPos, 6);
                                peg$currPos += 6;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c107); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c108) {
                                  s0 = input.substr(peg$currPos, 3);
                                  peg$currPos += 3;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c109); }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTime() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 20 + 13,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c110) {
          s2 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c111); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseInteger();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsePeriod();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c112(s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseInteger();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c1;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c2); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseInteger();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c1;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c2); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseInteger();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 58) {
                s5 = peg$c1;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c2); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseInteger();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsePeriod();
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c113(s1, s2, s3, s4, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsePeriod() {
      var s0, s1;

      var key    = peg$currPos * 20 + 14,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c114) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c115); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c116) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c117); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c118(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDuration() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 20 + 15,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c3;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s1 = peg$c119;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseInteger();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseDurationUnit();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c121(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDurationUnit() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 20 + 16,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c122) {
        s1 = input.substr(peg$currPos, 12);
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c124) {
          s1 = input.substr(peg$currPos, 11);
          peg$currPos += 11;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c125); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c126) {
            s1 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c127); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c128();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c129) {
          s1 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c130); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c131) {
            s1 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c132); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c133) {
              s1 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c134); }
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = peg$currPos;
              peg$silentFails++;
              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c135) {
                s3 = input.substr(peg$currPos, 2);
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c136); }
              }
              peg$silentFails--;
              if (s3 === peg$FAILED) {
                s2 = void 0;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                peg$silentFails++;
                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c137) {
                  s4 = input.substr(peg$currPos, 2);
                  peg$currPos += 2;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c138); }
                }
                peg$silentFails--;
                if (s4 === peg$FAILED) {
                  s3 = void 0;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 1).toLowerCase() === peg$c139) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c140); }
                  }
                  if (s4 !== peg$FAILED) {
                    s2 = [s2, s3, s4];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c141();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c142) {
            s1 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c143); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c144) {
              s1 = input.substr(peg$currPos, 6);
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c145); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c146) {
                s1 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c147); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c148) {
                  s1 = input.substr(peg$currPos, 3);
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c149); }
                }
                if (s1 === peg$FAILED) {
                  s1 = peg$currPos;
                  s2 = peg$currPos;
                  peg$silentFails++;
                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c150) {
                    s3 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c151); }
                  }
                  peg$silentFails--;
                  if (s3 === peg$FAILED) {
                    s2 = void 0;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c152) {
                      s4 = input.substr(peg$currPos, 2);
                      peg$currPos += 2;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c153); }
                    }
                    peg$silentFails--;
                    if (s4 === peg$FAILED) {
                      s3 = void 0;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c154) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c155); }
                      }
                      if (s4 !== peg$FAILED) {
                        s2 = [s2, s3, s4];
                        s1 = s2;
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                }
              }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c156();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c157) {
              s1 = input.substr(peg$currPos, 5);
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c158); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c159) {
                s1 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c160); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 1).toLowerCase() === peg$c161) {
                  s1 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c162); }
                }
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c163();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c164) {
                s1 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c165); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c166) {
                  s1 = input.substr(peg$currPos, 3);
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c167); }
                }
                if (s1 === peg$FAILED) {
                  s1 = peg$currPos;
                  s2 = peg$currPos;
                  peg$silentFails++;
                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c168) {
                    s3 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c169); }
                  }
                  peg$silentFails--;
                  if (s3 === peg$FAILED) {
                    s2 = void 0;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c170) {
                      s3 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c171); }
                    }
                    if (s3 !== peg$FAILED) {
                      s2 = [s2, s3];
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c172();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c173) {
                  s1 = input.substr(peg$currPos, 5);
                  peg$currPos += 5;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c174); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c175) {
                    s1 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c176); }
                  }
                  if (s1 === peg$FAILED) {
                    s1 = peg$currPos;
                    s2 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c177) {
                      s3 = input.substr(peg$currPos, 2);
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c178); }
                    }
                    peg$silentFails--;
                    if (s3 === peg$FAILED) {
                      s2 = void 0;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c179) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c180); }
                      }
                      if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c181();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 8).toLowerCase() === peg$c182) {
                    s1 = input.substr(peg$currPos, 8);
                    peg$currPos += 8;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c183); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c184) {
                      s1 = input.substr(peg$currPos, 7);
                      peg$currPos += 7;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c185); }
                    }
                    if (s1 === peg$FAILED) {
                      s1 = peg$currPos;
                      s2 = peg$currPos;
                      peg$silentFails++;
                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c186) {
                        s3 = input.substr(peg$currPos, 5);
                        peg$currPos += 5;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c187); }
                      }
                      peg$silentFails--;
                      if (s3 === peg$FAILED) {
                        s2 = void 0;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                      if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c188) {
                          s3 = input.substr(peg$currPos, 4);
                          peg$currPos += 4;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c189); }
                        }
                        if (s3 !== peg$FAILED) {
                          s2 = [s2, s3];
                          s1 = s2;
                        } else {
                          peg$currPos = s1;
                          s1 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c190();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c191) {
                      s1 = input.substr(peg$currPos, 6);
                      peg$currPos += 6;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c192); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c193) {
                        s1 = input.substr(peg$currPos, 5);
                        peg$currPos += 5;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c194); }
                      }
                      if (s1 === peg$FAILED) {
                        s1 = peg$currPos;
                        s2 = peg$currPos;
                        peg$silentFails++;
                        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c195) {
                          s3 = input.substr(peg$currPos, 2);
                          peg$currPos += 2;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c196); }
                        }
                        peg$silentFails--;
                        if (s3 === peg$FAILED) {
                          s2 = void 0;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                        if (s2 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c197) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c198); }
                          }
                          if (s3 !== peg$FAILED) {
                            s2 = [s2, s3];
                            s1 = s2;
                          } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s1;
                          s1 = peg$FAILED;
                        }
                      }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c199();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c200) {
                        s1 = input.substr(peg$currPos, 8);
                        peg$currPos += 8;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c201); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c202) {
                          s1 = input.substr(peg$currPos, 7);
                          peg$currPos += 7;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c203); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c204) {
                            s1 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c205); }
                          }
                        }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c206();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c207) {
                          s1 = input.substr(peg$currPos, 5);
                          peg$currPos += 5;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c208); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c209) {
                            s1 = input.substr(peg$currPos, 4);
                            peg$currPos += 4;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c210); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 1).toLowerCase() === peg$c211) {
                              s1 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c212); }
                            }
                          }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c213();
                        }
                        s0 = s1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseInteger() {
      var s0, s1, s2;

      var key    = peg$currPos * 20 + 17,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c6.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c6.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c215();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c214); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parse_() {
      var s0, s1, s2;

      var key    = peg$currPos * 20 + 18,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewhitespace();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsewhitespace();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c217(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c216); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsewhitespace() {
      var s0;

      var key    = peg$currPos * 20 + 19,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (peg$c218.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c219); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }


      //var script = document.createElement('script')
      //script.src = "https://cdn.jsdelivr.net/momentjs/2.11.1/moment.min.js";
      //document.head.appendChild(script);

      if (!options.moment) {
        options.moment = moment;
      }

      function currentMoment() {
        if (!options.currentMoment) {
          options.currentMoment = options.moment();
        }
        return options.moment(options.currentMoment);
      }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
